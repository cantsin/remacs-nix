# Generated by carnix 0.10.0: carnix generate-nix --src ./. --standalone
with import <nixpkgs> {};
with buildRustCrateHelpers;
let inherit (lib.lists) fold;
    inherit (lib.attrsets) recursiveUpdate;
  cratesIO = (callPackage ./crates-io.nix { });
in
rec {
  crates = cratesIO // rec {
# alloc_unexecmacosx-0.1.0

    crates.alloc_unexecmacosx."0.1.0" = deps: { features?(features_.alloc_unexecmacosx."0.1.0" deps {}) }: buildRustCrate {
      crateName = "alloc_unexecmacosx";
      version = "0.1.0";
      authors = [ "Felix S. Klock II <pnkfelix@pnkfx.org>" ];
      edition = "2018";
      src = exclude [ ".git" "target" ] ./alloc_unexecmacosx;
      dependencies = mapFeatures features ([
        (cratesIO.crates."libc"."${deps."alloc_unexecmacosx"."0.1.0"."libc"}" deps)
      ]);
    };
    features_.alloc_unexecmacosx."0.1.0" = deps: f: updateFeatures f (rec {
      alloc_unexecmacosx."0.1.0".default = (f.alloc_unexecmacosx."0.1.0".default or true);
      libc."${deps.alloc_unexecmacosx."0.1.0".libc}".default = (f.libc."${deps.alloc_unexecmacosx."0.1.0".libc}".default or false);
    }) [
      (cratesIO.features_.libc."${deps."alloc_unexecmacosx"."0.1.0"."libc"}" deps)
    ];


# end
# remacs-0.1.0

    crates.remacs."0.1.0" = deps: { features?(features_.remacs."0.1.0" deps {}) }: buildRustCrate {
      crateName = "remacs";
      version = "0.1.0";
      description = "a Rust port of Emacs";
      authors = [ "Wilfred Hughes <me@wilfred.me.uk>" ];
      edition = "2018";
      src = fetchFromGitHub {
        owner = "remacs";
        repo = "remacs";
        rev = "585040adf0bb14eb80aec218217e0c5bf47780dd";
        sha256 = "0aplqz5xl7y7jdps37yh291qvvlrc4gm0livbcdcckqwjkkbkb17";
        # date = 2019-05-21T17:15:34-07:00;
      };
      workspace_member = "rust_src";
      type = [ "staticlib" ];
      build = "build.rs";
      dependencies = mapFeatures features ([
        (cratesIO.crates."base64"."${deps."remacs"."0.1.0"."base64"}" deps)
        (cratesIO.crates."cfg_if"."${deps."remacs"."0.1.0"."cfg_if"}" deps)
        (cratesIO.crates."errno"."${deps."remacs"."0.1.0"."errno"}" deps)
        (cratesIO.crates."field_offset"."${deps."remacs"."0.1.0"."field_offset"}" deps)
        (cratesIO.crates."flate2"."${deps."remacs"."0.1.0"."flate2"}" deps)
        (cratesIO.crates."itertools"."${deps."remacs"."0.1.0"."itertools"}" deps)
        (cratesIO.crates."lazy_static"."${deps."remacs"."0.1.0"."lazy_static"}" deps)
        (cratesIO.crates."libc"."${deps."remacs"."0.1.0"."libc"}" deps)
        (cratesIO.crates."line_wrap"."${deps."remacs"."0.1.0"."line_wrap"}" deps)
        (cratesIO.crates."md5"."${deps."remacs"."0.1.0"."md5"}" deps)
        (cratesIO.crates."rand"."${deps."remacs"."0.1.0"."rand"}" deps)
        (crates."remacs_lib"."${deps."remacs"."0.1.0"."remacs_lib"}" deps)
        (crates."remacs_macros"."${deps."remacs"."0.1.0"."remacs_macros"}" deps)
        (cratesIO.crates."sha1"."${deps."remacs"."0.1.0"."sha1"}" deps)
        (cratesIO.crates."sha2"."${deps."remacs"."0.1.0"."sha2"}" deps)
        (cratesIO.crates."systemstat"."${deps."remacs"."0.1.0"."systemstat"}" deps)
      ]
        ++ (if features.remacs."0.1.0".clippy or false then [ (cratesIO.crates.clippy."${deps."remacs"."0.1.0".clippy}" deps) ] else []))
        ++ (if kernel == "darwin" then mapFeatures features ([
      ]
        ++ (if features.remacs."0.1.0".alloc_unexecmacosx or false then [ (crates.alloc_unexecmacosx."${deps."remacs"."0.1.0".alloc_unexecmacosx}" deps) ] else [])) else []);

      buildDependencies = mapFeatures features ([
        (cratesIO.crates."lazy_static"."${deps."remacs"."0.1.0"."lazy_static"}" deps)
        (cratesIO.crates."libc"."${deps."remacs"."0.1.0"."libc"}" deps)
        (cratesIO.crates."regex"."${deps."remacs"."0.1.0"."regex"}" deps)
      ]
        ++ (if features.remacs."0.1.0".clippy or false then [ (cratesIO.crates.clippy."${deps."remacs"."0.1.0".clippy}" deps) ] else []));
      features = mkFeatures (features."remacs"."0.1.0" or {});
    };
    features_.remacs."0.1.0" = deps: f: updateFeatures f (rec {
      alloc_unexecmacosx."${deps.remacs."0.1.0".alloc_unexecmacosx}".default = true;
      base64."${deps.remacs."0.1.0".base64}".default = true;
      cfg_if."${deps.remacs."0.1.0".cfg_if}".default = true;
      clippy."${deps.remacs."0.1.0".clippy}".default = true;
      errno."${deps.remacs."0.1.0".errno}".default = true;
      field_offset."${deps.remacs."0.1.0".field_offset}".default = true;
      flate2 = fold recursiveUpdate {} [
        { "${deps.remacs."0.1.0".flate2}"."rust_backend" = true; }
        { "${deps.remacs."0.1.0".flate2}".default = (f.flate2."${deps.remacs."0.1.0".flate2}".default or false); }
      ];
      itertools."${deps.remacs."0.1.0".itertools}".default = true;
      lazy_static."${deps.remacs."0.1.0".lazy_static}".default = true;
      libc."${deps.remacs."0.1.0".libc}".default = true;
      line_wrap."${deps.remacs."0.1.0".line_wrap}".default = true;
      md5."${deps.remacs."0.1.0".md5}".default = true;
      rand."${deps.remacs."0.1.0".rand}".default = true;
      regex."${deps.remacs."0.1.0".regex}".default = true;
      remacs = fold recursiveUpdate {} [
        { "0.1.0"."alloc_unexecmacosx" =
          (f.remacs."0.1.0"."alloc_unexecmacosx" or false) ||
          (f.remacs."0.1.0".unexecmacosx or false) ||
          (remacs."0.1.0"."unexecmacosx" or false); }
        { "0.1.0"."unexec" =
          (f.remacs."0.1.0"."unexec" or false) ||
          (f.remacs."0.1.0".default or false) ||
          (remacs."0.1.0"."default" or false); }
        { "0.1.0"."use-xml2" =
          (f.remacs."0.1.0"."use-xml2" or false) ||
          (f.remacs."0.1.0".default or false) ||
          (remacs."0.1.0"."default" or false); }
        { "0.1.0"."window-system" =
          (f.remacs."0.1.0"."window-system" or false) ||
          (f.remacs."0.1.0".default or false) ||
          (remacs."0.1.0"."default" or false); }
        { "0.1.0"."window-system-x11" =
          (f.remacs."0.1.0"."window-system-x11" or false) ||
          (f.remacs."0.1.0".default or false) ||
          (remacs."0.1.0"."default" or false); }
        { "0.1.0".default = (f.remacs."0.1.0".default or true); }
      ];
      remacs_lib."${deps.remacs."0.1.0".remacs_lib}".default = true;
      remacs_macros."${deps.remacs."0.1.0".remacs_macros}".default = true;
      sha1."${deps.remacs."0.1.0".sha1}".default = true;
      sha2."${deps.remacs."0.1.0".sha2}".default = true;
      systemstat."${deps.remacs."0.1.0".systemstat}".default = true;
    }) [
      (cratesIO.features_.base64."${deps."remacs"."0.1.0"."base64"}" deps)
      (cratesIO.features_.cfg_if."${deps."remacs"."0.1.0"."cfg_if"}" deps)
      (cratesIO.features_.clippy."${deps."remacs"."0.1.0"."clippy"}" deps)
      (cratesIO.features_.errno."${deps."remacs"."0.1.0"."errno"}" deps)
      (cratesIO.features_.field_offset."${deps."remacs"."0.1.0"."field_offset"}" deps)
      (cratesIO.features_.flate2."${deps."remacs"."0.1.0"."flate2"}" deps)
      (cratesIO.features_.itertools."${deps."remacs"."0.1.0"."itertools"}" deps)
      (cratesIO.features_.lazy_static."${deps."remacs"."0.1.0"."lazy_static"}" deps)
      (cratesIO.features_.libc."${deps."remacs"."0.1.0"."libc"}" deps)
      (cratesIO.features_.line_wrap."${deps."remacs"."0.1.0"."line_wrap"}" deps)
      (cratesIO.features_.md5."${deps."remacs"."0.1.0"."md5"}" deps)
      (cratesIO.features_.rand."${deps."remacs"."0.1.0"."rand"}" deps)
      (features_.remacs_lib."${deps."remacs"."0.1.0"."remacs_lib"}" deps)
      (features_.remacs_macros."${deps."remacs"."0.1.0"."remacs_macros"}" deps)
      (cratesIO.features_.sha1."${deps."remacs"."0.1.0"."sha1"}" deps)
      (cratesIO.features_.sha2."${deps."remacs"."0.1.0"."sha2"}" deps)
      (cratesIO.features_.systemstat."${deps."remacs"."0.1.0"."systemstat"}" deps)
      (cratesIO.features_.clippy."${deps."remacs"."0.1.0"."clippy"}" deps)
      (cratesIO.features_.lazy_static."${deps."remacs"."0.1.0"."lazy_static"}" deps)
      (cratesIO.features_.libc."${deps."remacs"."0.1.0"."libc"}" deps)
      (cratesIO.features_.regex."${deps."remacs"."0.1.0"."regex"}" deps)
      (features_.alloc_unexecmacosx."${deps."remacs"."0.1.0"."alloc_unexecmacosx"}" deps)
    ];


# end
# remacs-lib-0.1.0

    crates.remacs_lib."0.1.0" = deps: { features?(features_.remacs_lib."0.1.0" deps {}) }: buildRustCrate {
      crateName = "remacs-lib";
      crateType = ["lib"];
      version = "0.1.0";
      authors = [  ];
      edition = "2018";
      src = fetchFromGitHub {
        owner = "remacs";
        repo = "remacs";
        rev = "585040adf0bb14eb80aec218217e0c5bf47780dd";
        sha256 = "0aplqz5xl7y7jdps37yh291qvvlrc4gm0livbcdcckqwjkkbkb17";
        # date = 2019-05-21T17:15:34-07:00;
      };
      workspace_member = "rust_src/remacs-lib";
      libPath = "lib.rs";
      type = [ "staticlib" "rlib" ];
      dependencies = mapFeatures features ([
        (cratesIO.crates."darling"."${deps."remacs_lib"."0.1.0"."darling"}" deps)
        (cratesIO.crates."errno"."${deps."remacs_lib"."0.1.0"."errno"}" deps)
        (cratesIO.crates."lazy_static"."${deps."remacs_lib"."0.1.0"."lazy_static"}" deps)
        (cratesIO.crates."libc"."${deps."remacs_lib"."0.1.0"."libc"}" deps)
        (cratesIO.crates."rand"."${deps."remacs_lib"."0.1.0"."rand"}" deps)
        (cratesIO.crates."regex"."${deps."remacs_lib"."0.1.0"."regex"}" deps)
        (crates."remacs_util"."${deps."remacs_lib"."0.1.0"."remacs_util"}" deps)
        (cratesIO.crates."time"."${deps."remacs_lib"."0.1.0"."time"}" deps)
      ]);
      features = mkFeatures (features."remacs_lib"."0.1.0" or {});
    };
    features_.remacs_lib."0.1.0" = deps: f: updateFeatures f (rec {
      darling."${deps.remacs_lib."0.1.0".darling}".default = true;
      errno."${deps.remacs_lib."0.1.0".errno}".default = true;
      lazy_static."${deps.remacs_lib."0.1.0".lazy_static}".default = true;
      libc."${deps.remacs_lib."0.1.0".libc}".default = true;
      rand."${deps.remacs_lib."0.1.0".rand}".default = true;
      regex."${deps.remacs_lib."0.1.0".regex}".default = true;
      remacs_lib."0.1.0".default = (f.remacs_lib."0.1.0".default or true);
      remacs_util."${deps.remacs_lib."0.1.0".remacs_util}".default = true;
      time."${deps.remacs_lib."0.1.0".time}".default = true;
    }) [
      (cratesIO.features_.darling."${deps."remacs_lib"."0.1.0"."darling"}" deps)
      (cratesIO.features_.errno."${deps."remacs_lib"."0.1.0"."errno"}" deps)
      (cratesIO.features_.lazy_static."${deps."remacs_lib"."0.1.0"."lazy_static"}" deps)
      (cratesIO.features_.libc."${deps."remacs_lib"."0.1.0"."libc"}" deps)
      (cratesIO.features_.rand."${deps."remacs_lib"."0.1.0"."rand"}" deps)
      (cratesIO.features_.regex."${deps."remacs_lib"."0.1.0"."regex"}" deps)
      (features_.remacs_util."${deps."remacs_lib"."0.1.0"."remacs_util"}" deps)
      (cratesIO.features_.time."${deps."remacs_lib"."0.1.0"."time"}" deps)
    ];


# end
# remacs-macros-0.1.0

    crates.remacs_macros."0.1.0" = deps: { features?(features_.remacs_macros."0.1.0" deps {}) }: buildRustCrate {
      crateName = "remacs-macros";
      version = "0.1.0";
      description = "Procedural macro used to generate definitions for lisp native functions.";
      authors = [  ];
      edition = "2018";
      src = fetchFromGitHub {
        owner = "remacs";
        repo = "remacs";
        rev = "585040adf0bb14eb80aec218217e0c5bf47780dd";
        sha256 = "0aplqz5xl7y7jdps37yh291qvvlrc4gm0livbcdcckqwjkkbkb17";
        # date = 2019-05-21T17:15:34-07:00;
      };
      workspace_member = "rust_src/remacs-macros";
      libPath = "lib.rs";
      procMacro = true;
      dependencies = mapFeatures features ([
        (cratesIO.crates."lazy_static"."${deps."remacs_macros"."0.1.0"."lazy_static"}" deps)
        (cratesIO.crates."proc_macro2"."${deps."remacs_macros"."0.1.0"."proc_macro2"}" deps)
        (cratesIO.crates."quote"."${deps."remacs_macros"."0.1.0"."quote"}" deps)
        (cratesIO.crates."regex"."${deps."remacs_macros"."0.1.0"."regex"}" deps)
        (crates."remacs_util"."${deps."remacs_macros"."0.1.0"."remacs_util"}" deps)
        (cratesIO.crates."syn"."${deps."remacs_macros"."0.1.0"."syn"}" deps)
      ]);
    };
    features_.remacs_macros."0.1.0" = deps: f: updateFeatures f (rec {
      lazy_static."${deps.remacs_macros."0.1.0".lazy_static}".default = true;
      proc_macro2."${deps.remacs_macros."0.1.0".proc_macro2}".default = true;
      quote."${deps.remacs_macros."0.1.0".quote}".default = true;
      regex."${deps.remacs_macros."0.1.0".regex}".default = true;
      remacs_macros."0.1.0".default = (f.remacs_macros."0.1.0".default or true);
      remacs_util."${deps.remacs_macros."0.1.0".remacs_util}".default = true;
      syn = fold recursiveUpdate {} [
        { "${deps.remacs_macros."0.1.0".syn}"."full" = true; }
        { "${deps.remacs_macros."0.1.0".syn}".default = true; }
      ];
    }) [
      (cratesIO.features_.lazy_static."${deps."remacs_macros"."0.1.0"."lazy_static"}" deps)
      (cratesIO.features_.proc_macro2."${deps."remacs_macros"."0.1.0"."proc_macro2"}" deps)
      (cratesIO.features_.quote."${deps."remacs_macros"."0.1.0"."quote"}" deps)
      (cratesIO.features_.regex."${deps."remacs_macros"."0.1.0"."regex"}" deps)
      (features_.remacs_util."${deps."remacs_macros"."0.1.0"."remacs_util"}" deps)
      (cratesIO.features_.syn."${deps."remacs_macros"."0.1.0"."syn"}" deps)
    ];


# end
# remacs-util-0.1.0

    crates.remacs_util."0.1.0" = deps: { features?(features_.remacs_util."0.1.0" deps {}) }: buildRustCrate {
      crateName = "remacs-util";
      version = "0.1.0";
      description = "Common utility code linked by other remacs crates.";
      authors = [  ];
      edition = "2018";
      src = fetchFromGitHub {
        owner = "remacs";
        repo = "remacs";
        rev = "585040adf0bb14eb80aec218217e0c5bf47780dd";
        sha256 = "0aplqz5xl7y7jdps37yh291qvvlrc4gm0livbcdcckqwjkkbkb17";
        # date = 2019-05-21T17:15:34-07:00;
      };
      workspace_member = "rust_src/remacs-util";
      libPath = "lib.rs";
      dependencies = mapFeatures features ([
        (cratesIO.crates."darling"."${deps."remacs_util"."0.1.0"."darling"}" deps)
        (cratesIO.crates."errno"."${deps."remacs_util"."0.1.0"."errno"}" deps)
        (cratesIO.crates."libc"."${deps."remacs_util"."0.1.0"."libc"}" deps)
        (cratesIO.crates."syn"."${deps."remacs_util"."0.1.0"."syn"}" deps)
      ]);
      features = mkFeatures (features."remacs_util"."0.1.0" or {});
    };
    features_.remacs_util."0.1.0" = deps: f: updateFeatures f (rec {
      darling."${deps.remacs_util."0.1.0".darling}".default = true;
      errno."${deps.remacs_util."0.1.0".errno}".default = true;
      libc."${deps.remacs_util."0.1.0".libc}".default = true;
      remacs_util."0.1.0".default = (f.remacs_util."0.1.0".default or true);
      syn = fold recursiveUpdate {} [
        { "${deps.remacs_util."0.1.0".syn}"."full" = true; }
        { "${deps.remacs_util."0.1.0".syn}".default = true; }
      ];
    }) [
      (cratesIO.features_.darling."${deps."remacs_util"."0.1.0"."darling"}" deps)
      (cratesIO.features_.errno."${deps."remacs_util"."0.1.0"."errno"}" deps)
      (cratesIO.features_.libc."${deps."remacs_util"."0.1.0"."libc"}" deps)
      (cratesIO.features_.syn."${deps."remacs_util"."0.1.0"."syn"}" deps)
    ];


# end

  };

  remacs_lib = crates.crates.remacs_lib."0.1.0" deps;
  remacs_macros = crates.crates.remacs_macros."0.1.0" deps;
  remacs_util = crates.crates.remacs_util."0.1.0" deps;
  remacs = crates.crates.remacs."0.1.0" deps;
  __all = [
    (remacs_lib {})
    (remacs_macros {})
    (remacs_util {})
    # (remacs {})
  ];
  deps.adler32."1.0.3" = {};
  deps.aho_corasick."0.6.9" = {
    memchr = "2.1.3";
  };
  deps.alloc_unexecmacosx."0.1.0" = {
    libc = "0.2.48";
  };
  deps.autocfg."0.1.2" = {};
  deps.base64."0.10.1" = {
    byteorder = "1.3.1";
  };
  deps.bitflags."1.0.4" = {};
  deps.block_buffer."0.7.2" = {
    block_padding = "0.1.3";
    byte_tools = "0.3.1";
    byteorder = "1.3.1";
    generic_array = "0.12.0";
  };
  deps.block_padding."0.1.3" = {
    byte_tools = "0.3.1";
  };
  deps.build_const."0.2.1" = {};
  deps.byte_tools."0.3.1" = {};
  deps.byteorder."1.3.1" = {};
  deps.bytesize."0.1.3" = {};
  deps.cc."1.0.28" = {};
  deps.cfg_if."0.1.6" = {};
  deps.chrono."0.4.6" = {
    num_integer = "0.1.39";
    num_traits = "0.2.6";
    time = "0.1.42";
  };
  deps.clippy."0.0.302" = {
    term = "0.5.1";
  };
  deps.cloudabi."0.0.3" = {
    bitflags = "1.0.4";
  };
  deps.crc."1.8.1" = {
    build_const = "0.2.1";
  };
  deps.crc32fast."1.1.2" = {
    cfg_if = "0.1.6";
  };
  deps.darling."0.2.2" = {
    darling_core = "0.2.2";
    darling_macro = "0.2.2";
  };
  deps.darling_core."0.2.2" = {
    ident_case = "1.0.0";
    lazy_static = "1.2.0";
    quote = "0.3.15";
    syn = "0.11.11";
  };
  deps.darling_macro."0.2.2" = {
    darling_core = "0.2.2";
    quote = "0.3.15";
    syn = "0.11.11";
  };
  deps.digest."0.8.0" = {
    generic_array = "0.12.0";
  };
  deps.either."1.5.1" = {};
  deps.errno."0.2.4" = {
    errno_dragonfly = "0.1.1";
    libc = "0.2.48";
    winapi = "0.3.6";
  };
  deps.errno_dragonfly."0.1.1" = {
    libc = "0.2.48";
    gcc = "0.3.55";
  };
  deps.fake_simd."0.1.2" = {};
  deps.field_offset."0.1.1" = {};
  deps.flate2."1.0.6" = {
    crc32fast = "1.1.2";
    libc = "0.2.48";
    miniz_oxide_c_api = "0.2.1";
  };
  deps.fuchsia_cprng."0.1.0" = {};
  deps.gcc."0.3.55" = {};
  deps.generic_array."0.12.0" = {
    typenum = "1.10.0";
  };
  deps.ident_case."1.0.0" = {};
  deps.itertools."0.8.0" = {
    either = "1.5.1";
  };
  deps.lazy_static."1.2.0" = {};
  deps.libc."0.2.48" = {};
  deps.line_wrap."0.1.1" = {
    safemem = "0.3.0";
  };
  deps.md5."0.6.1" = {};
  deps.memchr."1.0.2" = {
    libc = "0.2.48";
  };
  deps.memchr."2.1.3" = {
    cfg_if = "0.1.6";
    libc = "0.2.48";
  };
  deps.miniz_oxide."0.2.1" = {
    adler32 = "1.0.3";
  };
  deps.miniz_oxide_c_api."0.2.1" = {
    crc = "1.8.1";
    libc = "0.2.48";
    miniz_oxide = "0.2.1";
    cc = "1.0.28";
  };
  deps.nom."3.2.1" = {
    memchr = "1.0.2";
  };
  deps.num_integer."0.1.39" = {
    num_traits = "0.2.6";
  };
  deps.num_traits."0.2.6" = {};
  deps.opaque_debug."0.2.2" = {};
  deps.proc_macro2."0.4.29" = {
    unicode_xid = "0.1.0";
  };
  deps.quote."0.3.15" = {};
  deps.quote."0.6.12" = {
    proc_macro2 = "0.4.29";
  };
  deps.rand."0.6.5" = {
    rand_chacha = "0.1.1";
    rand_core = "0.4.0";
    rand_hc = "0.1.0";
    rand_isaac = "0.1.1";
    rand_jitter = "0.1.2";
    rand_os = "0.1.2";
    rand_pcg = "0.1.1";
    rand_xorshift = "0.1.1";
    autocfg = "0.1.2";
    libc = "0.2.48";
    winapi = "0.3.6";
  };
  deps.rand_chacha."0.1.1" = {
    rand_core = "0.3.1";
    autocfg = "0.1.2";
  };
  deps.rand_core."0.3.1" = {
    rand_core = "0.4.0";
  };
  deps.rand_core."0.4.0" = {};
  deps.rand_hc."0.1.0" = {
    rand_core = "0.3.1";
  };
  deps.rand_isaac."0.1.1" = {
    rand_core = "0.3.1";
  };
  deps.rand_jitter."0.1.2" = {
    rand_core = "0.4.0";
    libc = "0.2.48";
    winapi = "0.3.6";
  };
  deps.rand_os."0.1.2" = {
    rand_core = "0.4.0";
    rdrand = "0.4.0";
    cloudabi = "0.0.3";
    fuchsia_cprng = "0.1.0";
    libc = "0.2.48";
    winapi = "0.3.6";
  };
  deps.rand_pcg."0.1.1" = {
    rand_core = "0.3.1";
    rustc_version = "0.2.3";
  };
  deps.rand_xorshift."0.1.1" = {
    rand_core = "0.3.1";
  };
  deps.rdrand."0.4.0" = {
    rand_core = "0.3.1";
  };
  deps.redox_syscall."0.1.51" = {};
  deps.regex."0.2.11" = {
    aho_corasick = "0.6.9";
    memchr = "2.1.3";
    regex_syntax = "0.5.6";
    thread_local = "0.3.6";
    utf8_ranges = "1.0.2";
  };
  deps.regex."1.1.0" = {
    aho_corasick = "0.6.9";
    memchr = "2.1.3";
    regex_syntax = "0.6.5";
    thread_local = "0.3.6";
    utf8_ranges = "1.0.2";
  };
  deps.regex_syntax."0.5.6" = {
    ucd_util = "0.1.3";
  };
  deps.regex_syntax."0.6.5" = {
    ucd_util = "0.1.3";
  };
  deps.remacs."0.1.0" = {
    base64 = "0.10.1";
    cfg_if = "0.1.6";
    clippy = "0.0.302";
    errno = "0.2.4";
    field_offset = "0.1.1";
    flate2 = "1.0.6";
    itertools = "0.8.0";
    lazy_static = "1.2.0";
    libc = "0.2.48";
    line_wrap = "0.1.1";
    md5 = "0.6.1";
    rand = "0.6.5";
    remacs_lib = "0.1.0";
    remacs_macros = "0.1.0";
    sha1 = "0.6.0";
    sha2 = "0.8.0";
    systemstat = "0.1.4";
    regex = "1.1.0";
    alloc_unexecmacosx = "0.1.0";
  };
  deps.remacs_lib."0.1.0" = {
    darling = "0.2.2";
    errno = "0.2.4";
    lazy_static = "1.2.0";
    libc = "0.2.48";
    rand = "0.6.5";
    regex = "1.1.0";
    remacs_util = "0.1.0";
    time = "0.1.42";
  };
  deps.remacs_macros."0.1.0" = {
    lazy_static = "1.2.0";
    proc_macro2 = "0.4.29";
    quote = "0.6.12";
    regex = "0.2.11";
    remacs_util = "0.1.0";
    syn = "0.15.33";
  };
  deps.remacs_util."0.1.0" = {
    darling = "0.2.2";
    errno = "0.2.4";
    libc = "0.2.48";
    syn = "0.11.11";
  };
  deps.remove_dir_all."0.5.1" = {
    winapi = "0.3.6";
  };
  deps.rustc_version."0.2.3" = {
    semver = "0.9.0";
  };
  deps.safemem."0.3.0" = {};
  deps.semver."0.9.0" = {
    semver_parser = "0.7.0";
  };
  deps.semver_parser."0.7.0" = {};
  deps.sha1."0.6.0" = {};
  deps.sha2."0.8.0" = {
    block_buffer = "0.7.2";
    digest = "0.8.0";
    fake_simd = "0.1.2";
    opaque_debug = "0.2.2";
  };
  deps.syn."0.11.11" = {
    quote = "0.3.15";
    synom = "0.11.3";
    unicode_xid = "0.0.4";
  };
  deps.syn."0.15.33" = {
    proc_macro2 = "0.4.29";
    quote = "0.6.12";
    unicode_xid = "0.1.0";
  };
  deps.synom."0.11.3" = {
    unicode_xid = "0.0.4";
  };
  deps.systemstat."0.1.4" = {
    bytesize = "0.1.3";
    chrono = "0.4.6";
    lazy_static = "1.2.0";
    libc = "0.2.48";
    time = "0.1.42";
    nom = "3.2.1";
    winapi = "0.3.6";
  };
  deps.tempfile."3.0.7" = {
    cfg_if = "0.1.6";
    rand = "0.6.5";
    remove_dir_all = "0.5.1";
    redox_syscall = "0.1.51";
    libc = "0.2.48";
    winapi = "0.3.6";
  };
  deps.term."0.5.1" = {
    byteorder = "1.3.1";
    winapi = "0.3.6";
  };
  deps.thread_local."0.3.6" = {
    lazy_static = "1.2.0";
  };
  deps.time."0.1.42" = {
    libc = "0.2.48";
    redox_syscall = "0.1.51";
    winapi = "0.3.6";
  };
  deps.typenum."1.10.0" = {};
  deps.ucd_util."0.1.3" = {};
  deps.unicode_xid."0.0.4" = {};
  deps.unicode_xid."0.1.0" = {};
  deps.utf8_ranges."1.0.2" = {};
  deps.winapi."0.3.6" = {
    winapi_i686_pc_windows_gnu = "0.4.0";
    winapi_x86_64_pc_windows_gnu = "0.4.0";
  };
  deps.winapi_i686_pc_windows_gnu."0.4.0" = {};
  deps.winapi_x86_64_pc_windows_gnu."0.4.0" = {};
}
